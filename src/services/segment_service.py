"""
Advanced Segment Generation Service (migrated from segment.py)
"""
import requests
import urllib.parse
from bs4 import BeautifulSoup
from datetime import datetime
from typing import Dict, Tuple
from src.services.ai_service import AIService
from src.services.category_detector import CategoryDetector
from src.config.constants import TRUSTED_SOURCES
from src.utils.logger import get_logger

logger = get_logger(__name__)

class SegmentService:
    def __init__(self):
        self.ai_service = AIService()
        self.category_detector = CategoryDetector()
        self.logger = logger
    
    def classify_topic_type(self, topic: str) -> str:
        """Determine if topic needs fact-checking or can use general knowledge"""
        topic_lower = topic.lower()
        
        # Topics that need current information and fact-checking
        factual_keywords = [
            "‡≤∏‡≤¶‡≥ç‡≤Ø‡≤¶", "‡≤á‡≤§‡≥ç‡≤§‡≥Ä‡≤ö‡≤ø‡≤®", "‡≤á‡≤Ç‡≤¶‡≤ø‡≤®", "‡≤à‡≤ó‡≤ø‡≤®", "‡≤™‡≥ç‡≤∞‡≤∏‡≥ç‡≤§‡≥Å‡≤§", "‡≤∏‡≥Å‡≤¶‡≥ç‡≤¶‡≤ø",
            "‡≤∞‡≤æ‡≤ú‡≤ï‡≥Ä‡≤Ø", "‡≤∏‡≤∞‡≥ç‡≤ï‡≤æ‡≤∞", "‡≤ö‡≥Å‡≤®‡≤æ‡≤µ‡≤£‡≥Ü", "‡≤∏‡≤ø‡≤é‡≤Ç", "‡≤™‡≥ç‡≤∞‡≤ß‡≤æ‡≤®‡≤ø", "‡≤™‡≤ï‡≥ç‡≤∑",
            "‡≤ò‡≤ü‡≤®‡≥Ü", "‡≤ï‡≥ç‡≤∞‡≥Ä‡≤°‡≤æ ‡≤∏‡≥Å‡≤¶‡≥ç‡≤¶‡≤ø", "‡≤™‡≤Ç‡≤¶‡≥ç‡≤Ø ‡≤´‡≤≤‡≤ø‡≤§‡≤æ‡≤Ç‡≤∂", "‡≤Æ‡≥Å‡≤ñ‡≥ç‡≤Ø‡≤Æ‡≤Ç‡≤§‡≥ç‡≤∞‡≤ø"
        ]
        
        # Check if needs fact-checking
        if any(keyword in topic_lower for keyword in factual_keywords):
            return "factual"
        return "general"

    def calculate_content_needs(self, duration_minutes: int) -> dict:
        """Calculate how much content is needed for the duration"""
        # Kannada speaking speed: 150 words per minute
        total_words = duration_minutes * 150
        
        if duration_minutes <= 2:
            return {"total_words": total_words, "sections": 2, "detail": "brief"}
        elif duration_minutes <= 5:
            return {"total_words": total_words, "sections": 3, "detail": "moderate"}
        elif duration_minutes <= 10:
            return {"total_words": total_words, "sections": 4, "detail": "detailed"}
        else:
            return {"total_words": total_words, "sections": max(5, duration_minutes//3), "detail": "comprehensive"}

    def search_duckduckgo(self, topic: str) -> str:
        """Search for current information if needed"""
        try:
            site_filters = " OR ".join([f"site:{source}" for source in TRUSTED_SOURCES[:5]])
            search_query = f"{topic} India news ({site_filters})"
            
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            }
            
            search_url = f"https://html.duckduckgo.com/html/?q={urllib.parse.quote(search_query)}"
            response = requests.get(search_url, headers=headers, timeout=10)
            
            if response.status_code == 200:
                soup = BeautifulSoup(response.content, 'html.parser')
                results = []
                
                for result in soup.find_all('div', class_='result__body')[:3]:
                    title_elem = result.find('a', class_='result__a')
                    snippet_elem = result.find('a', class_='result__snippet')
                    
                    if title_elem and snippet_elem:
                        title = title_elem.get_text().strip()
                        snippet = snippet_elem.get_text().strip()
                        url = title_elem.get('href', '')
                        
                        if any(source in url for source in TRUSTED_SOURCES):
                            results.append(f"Title: {title}\nSnippet: {snippet}\nSource: {url}\n")
                
                return "\n".join(results) if results else ""
            return ""
            
        except Exception as e:
            self.logger.error(f"Search error: {e}")
            return ""

    def create_enhanced_prompt(self, topic: str, duration: int, topic_type: str, 
                             content_needs: dict, web_results: str = "") -> str:
        """Create the enhanced prompt based on topic type and duration"""
        
        total_words = content_needs["total_words"]
        sections = content_needs["sections"]
        detail_level = content_needs["detail"]
        
        # Different strategies for different topic types
        if topic_type == "factual":
            content_guidance = f"""
üìä ‡≤µ‡≤ø‡≤∑‡≤Ø ‡≤™‡≥ç‡≤∞‡≤ï‡≤æ‡≤∞: ‡≤∏‡≤§‡≥ç‡≤Ø-‡≤™‡≤∞‡≤ø‡≤∂‡≥Ä‡≤≤‡≤®‡≥Ü ‡≤Ö‡≤ó‡≤§‡≥ç‡≤Ø (‡≤∏‡≤¶‡≥ç‡≤Ø‡≤¶ ‡≤∏‡≥Å‡≤¶‡≥ç‡≤¶‡≤ø)

‚ö†Ô∏è ‡≤Æ‡≤π‡≤§‡≥ç‡≤µ‡≤¶ ‡≤®‡≤ø‡≤Ø‡≤Æ‡≤ó‡≤≥‡≥Å:
‚Ä¢ ‡≤ï‡≥á‡≤µ‡≤≤ ‡≤ï‡≥Ü‡≤≥‡≤ó‡≤ø‡≤® ‡≤µ‡≥Ü‡≤¨‡≥ç ‡≤∏‡≤∞‡≥ç‡≤ö‡≥ç ‡≤Æ‡≤æ‡≤π‡≤ø‡≤§‡≤ø‡≤Ø‡≤®‡≥ç‡≤®‡≥Å ‡≤Æ‡≤æ‡≤§‡≥ç‡≤∞ ‡≤¨‡≤≥‡≤∏‡≤ø
‚Ä¢ "‡≤µ‡≤∞‡≤¶‡≤ø‡≤ó‡≤≥ ‡≤™‡≥ç‡≤∞‡≤ï‡≤æ‡≤∞", "‡≤Æ‡≥Ç‡≤≤‡≤ó‡≤≥ ‡≤™‡≥ç‡≤∞‡≤ï‡≤æ‡≤∞" ‡≤é‡≤Ç‡≤¨ ‡≤™‡≤¶‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤¨‡≤≥‡≤∏‡≤ø
‚Ä¢ ‡≤¶‡≤ø‡≤®‡≤æ‡≤Ç‡≤ï‡≤ó‡≤≥‡≥Å ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤Ö‡≤Ç‡≤ï‡≤ø‡≤Ö‡≤Ç‡≤∂‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤∏‡≥á‡≤∞‡≤ø‡≤∏‡≤ø

üîç ‡≤µ‡≥Ü‡≤¨‡≥ç ‡≤∏‡≤∞‡≥ç‡≤ö‡≥ç ‡≤Æ‡≤æ‡≤π‡≤ø‡≤§‡≤ø:
{web_results if web_results else "‡≤µ‡≥Ü‡≤¨‡≥ç ‡≤Æ‡≤æ‡≤π‡≤ø‡≤§‡≤ø ‡≤≤‡≤≠‡≥ç‡≤Ø‡≤µ‡≤ø‡≤≤‡≥ç‡≤≤ - ‡≤∏‡≤æ‡≤Æ‡≤æ‡≤®‡≥ç‡≤Ø ‡≤Æ‡≤æ‡≤π‡≤ø‡≤§‡≤ø ‡≤Æ‡≤æ‡≤§‡≥ç‡≤∞ ‡≤®‡≥Ä‡≤°‡≤ø"}
"""
        else:
            content_guidance = f"""
üìö ‡≤µ‡≤ø‡≤∑‡≤Ø ‡≤™‡≥ç‡≤∞‡≤ï‡≤æ‡≤∞: ‡≤∏‡≤æ‡≤Æ‡≤æ‡≤®‡≥ç‡≤Ø ‡≤ú‡≥ç‡≤û‡≤æ‡≤®/‡≤∂‡≤ø‡≤ï‡≥ç‡≤∑‡≤£/‡≤Æ‡≤®‡≤∞‡≤Ç‡≤ú‡≤®‡≥Ü

‚úÖ ‡≤®‡≤ø‡≤Æ‡≤ó‡≥Ü ‡≤∏‡≤Ç‡≤™‡≥Ç‡≤∞‡≥ç‡≤£ ‡≤∏‡≥ç‡≤µ‡≤æ‡≤§‡≤Ç‡≤§‡≥ç‡≤∞‡≥ç‡≤Ø:
‚Ä¢ ‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤∏‡≤Ç‡≤™‡≥Ç‡≤∞‡≥ç‡≤£ ‡≤ú‡≥ç‡≤û‡≤æ‡≤®‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤¨‡≤≥‡≤∏‡≤ø
‚Ä¢ ‡≤µ‡≤ø‡≤∏‡≥ç‡≤§‡≥É‡≤§ ‡≤µ‡≤ø‡≤µ‡≤∞‡≤£‡≥Ü‡≤ó‡≤≥‡≥Å, ‡≤â‡≤¶‡≤æ‡≤π‡≤∞‡≤£‡≥Ü‡≤ó‡≤≥‡≥Å, ‡≤ï‡≤•‡≥Ü‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤∏‡≥á‡≤∞‡≤ø‡≤∏‡≤ø
‚Ä¢ ‡≤ê‡≤§‡≤ø‡≤π‡≤æ‡≤∏‡≤ø‡≤ï ‡≤∏‡≤Ç‡≤¶‡≤∞‡≥ç‡≤≠, ‡≤µ‡≥à‡≤ú‡≥ç‡≤û‡≤æ‡≤®‡≤ø‡≤ï ‡≤µ‡≤ø‡≤µ‡≤∞‡≤£‡≥Ü‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤®‡≥Ä‡≤°‡≤ø
‚Ä¢ ‡≤Ü‡≤∏‡≤ï‡≥ç‡≤§‡≤ø‡≤¶‡≤æ‡≤Ø‡≤ï ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤∂‡≤ø‡≤ï‡≥ç‡≤∑‡≤£‡≤æ‡≤§‡≥ç‡≤Æ‡≤ï‡≤µ‡≤æ‡≤ó‡≤ø ‡≤Æ‡≤æ‡≤°‡≤ø

üí° ‡≤π‡≥Ü‡≤ö‡≥ç‡≤ö‡≥Å‡≤µ‡≤∞‡≤ø ‡≤Æ‡≤æ‡≤π‡≤ø‡≤§‡≤ø:
{web_results if web_results else "‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤ú‡≥ç‡≤û‡≤æ‡≤® ‡≤Ü‡≤ß‡≤æ‡≤∞‡≤¶‡≤≤‡≥ç‡≤≤‡≤ø ‡≤∏‡≤Ç‡≤™‡≥Ç‡≤∞‡≥ç‡≤£ ‡≤∏‡≥Ü‡≤ó‡≥ç‡≤Æ‡≥Ü‡≤Ç‡≤ü‡≥ç ‡≤∞‡≤ö‡≤ø‡≤∏‡≤ø"}
"""

        # Duration-specific instructions
        if duration <= 2:
            duration_guide = "‚Ä¢ ‡≤∏‡≤Ç‡≤ï‡≥ç‡≤∑‡≤ø‡≤™‡≥ç‡≤§ ‡≤Ü‡≤¶‡≤∞‡≥Ü ‡≤™‡≥Ç‡≤∞‡≥ç‡≤£ ‡≤Æ‡≤æ‡≤π‡≤ø‡≤§‡≤ø"
        elif duration <= 5:
            duration_guide = "‚Ä¢ ‡≤Æ‡≤ß‡≥ç‡≤Ø‡≤Æ ‡≤µ‡≤ø‡≤µ‡≤∞‡≤£‡≥Ü ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤â‡≤¶‡≤æ‡≤π‡≤∞‡≤£‡≥Ü‡≤ó‡≤≥‡≥Å"
        elif duration <= 10:
            duration_guide = "‚Ä¢ ‡≤µ‡≤ø‡≤µ‡≤∞‡≤µ‡≤æ‡≤¶ ‡≤µ‡≤ø‡≤µ‡≤∞‡≤£‡≥Ü, ‡≤¨‡≤π‡≥Å ‡≤â‡≤¶‡≤æ‡≤π‡≤∞‡≤£‡≥Ü‡≤ó‡≤≥‡≥Å"
        else:
            duration_guide = "‚Ä¢ ‡≤∏‡≤Æ‡≤ó‡≥ç‡≤∞ ‡≤µ‡≤ø‡≤µ‡≤∞‡≤£‡≥Ü, ‡≤á‡≤§‡≤ø‡≤π‡≤æ‡≤∏, ‡≤∏‡≤Ç‡≤¶‡≤∞‡≥ç‡≤≠, ‡≤Ö‡≤®‡≥Å‡≤∑‡≤Ç‡≤ó‡≤ø‡≤ï ‡≤µ‡≤ø‡≤∑‡≤Ø‡≤ó‡≤≥‡≥Å"

        return f"""
‡≤®‡≥Ä‡≤µ‡≥Å ‡≤Ö‡≤®‡≥Å‡≤≠‡≤µ‡≤ø ‡≤ï‡≤®‡≥ç‡≤®‡≤° ‡≤ü‡≤ø‡≤µ‡≤ø ‡≤π‡≥ã‡≤∏‡≥ç‡≤ü‡≥ç ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤∂‡≤ø‡≤ï‡≥ç‡≤∑‡≤£ ‡≤§‡≤ú‡≥ç‡≤û. "{topic}" ‡≤µ‡≤ø‡≤∑‡≤Ø‡≤¶ ‡≤¨‡≤ó‡≥ç‡≤ó‡≥Ü ‡≤®‡≤ø‡≤ñ‡≤∞‡≤µ‡≤æ‡≤ó‡≤ø {duration} ‡≤®‡≤ø‡≤Æ‡≤ø‡≤∑‡≤ó‡≤≥ ‡≤ü‡≤ø‡≤µ‡≤ø ‡≤∏‡≥Ü‡≤ó‡≥ç‡≤Æ‡≥Ü‡≤Ç‡≤ü‡≥ç ‡≤∞‡≤ö‡≤ø‡≤∏‡≤ø.

{content_guidance}

üìè ‡≤Ö‡≤µ‡≤ß‡≤ø ‡≤Ö‡≤µ‡≤∂‡≥ç‡≤Ø‡≤ï‡≤§‡≥Ü‡≤ó‡≤≥‡≥Å:
‚Ä¢ ‡≤®‡≤ø‡≤ñ‡≤∞‡≤µ‡≤æ‡≤ó‡≤ø {duration} ‡≤®‡≤ø‡≤Æ‡≤ø‡≤∑‡≤ó‡≤≥ ‡≤ì‡≤¶‡≥Å‡≤µ ‡≤∏‡≤Æ‡≤Ø (‡≤∏‡≥Å‡≤Æ‡≤æ‡≤∞‡≥Å {total_words} ‡≤™‡≤¶‡≤ó‡≤≥‡≥Å)
‚Ä¢ {sections} ‡≤Æ‡≥Å‡≤ñ‡≥ç‡≤Ø ‡≤µ‡≤ø‡≤≠‡≤æ‡≤ó‡≤ó‡≤≥‡≤≤‡≥ç‡≤≤‡≤ø ‡≤µ‡≤ø‡≤Ç‡≤ó‡≤°‡≤ø‡≤∏‡≤ø
{duration_guide}

üéØ ‡≤∏‡≥Ü‡≤ó‡≥ç‡≤Æ‡≥Ü‡≤Ç‡≤ü‡≥ç ‡≤∞‡≤ö‡≤®‡≥Ü:
1. ‡≤Ü‡≤ï‡≤∞‡≥ç‡≤∑‡≤ï ‡≤™‡≤∞‡≤ø‡≤ö‡≤Ø (‡≤™‡≥ç‡≤∞‡≥á‡≤ï‡≥ç‡≤∑‡≤ï‡≤∞ ‡≤ó‡≤Æ‡≤® ‡≤∏‡≥Ü‡≤≥‡≥Ü‡≤Ø‡≤ø‡≤∞‡≤ø)
2. ‡≤Æ‡≥Å‡≤ñ‡≥ç‡≤Ø ‡≤µ‡≤ø‡≤∑‡≤Ø ‡≤µ‡≤ø‡≤µ‡≤∞‡≤£‡≥Ü
3. ‡≤â‡≤¶‡≤æ‡≤π‡≤∞‡≤£‡≥Ü‡≤ó‡≤≥‡≥Å ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤µ‡≤ø‡≤µ‡≤∞‡≤ó‡≤≥‡≥Å ({detail_level} ‡≤Æ‡≤ü‡≥ç‡≤ü‡≤¶‡≤≤‡≥ç‡≤≤‡≤ø)
4. ‡≤™‡≥ç‡≤∞‡≤≠‡≤æ‡≤µ‡≤∂‡≤æ‡≤≤‡≤ø ‡≤Æ‡≥Å‡≤ï‡≥ç‡≤§‡≤æ‡≤Ø

üìù ‡≤≠‡≤æ‡≤∑‡≤æ ‡≤Æ‡≤æ‡≤∞‡≥ç‡≤ó‡≤¶‡≤∞‡≥ç‡≤∂‡≤®:
‚Ä¢ ‡≤∂‡≥Å‡≤¶‡≥ç‡≤ß ‡≤ï‡≤®‡≥ç‡≤®‡≤°, ‡≤∏‡≤∞‡≤≥ ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤∏‡≥ç‡≤™‡≤∑‡≥ç‡≤ü
‚Ä¢ ‡≤ü‡≤ø‡≤µ‡≤ø ‡≤™‡≥ç‡≤∞‡≥á‡≤ï‡≥ç‡≤∑‡≤ï‡≤∞‡≤ø‡≤ó‡≥Ü ‡≤∏‡≥Ç‡≤ï‡≥ç‡≤§ ‡≤∂‡≥à‡≤≤‡≤ø
‚Ä¢ ‡≤™‡≥ç‡≤∞‡≤§‡≤ø ‡≤™‡≥ç‡≤Ø‡≤æ‡≤∞‡≤æ‡≤ó‡≥ç‡≤∞‡≤æ‡≤´‡≥ç 30-40 ‡≤∏‡≥Ü‡≤ï‡≥Ü‡≤Ç‡≤°‡≥Å‡≤ó‡≤≥ ‡≤ì‡≤¶‡≥Å‡≤µ ‡≤∏‡≤Æ‡≤Ø

‚ö†Ô∏è ‡≤Æ‡≥Å‡≤ñ‡≥ç‡≤Ø: ‡≤∏‡≥Ü‡≤ó‡≥ç‡≤Æ‡≥Ü‡≤Ç‡≤ü‡≥ç ‡≤ì‡≤¶‡≤≤‡≥Å ‡≤®‡≤ø‡≤ñ‡≤∞‡≤µ‡≤æ‡≤ó‡≤ø {duration} ‡≤®‡≤ø‡≤Æ‡≤ø‡≤∑‡≤ó‡≤≥‡≥Å ‡≤¨‡≥á‡≤ï‡≤æ‡≤ó‡≤¨‡≥á‡≤ï‡≥Å. ‡≤§‡≥Å‡≤Ç‡≤¨‡≤æ ‡≤ö‡≤ø‡≤ï‡≥ç‡≤ï‡≤¶‡≤æ‡≤ó‡≤ø‡≤∞‡≤¨‡≤æ‡≤∞‡≤¶‡≥Å!
"""

    async def generate_custom_segment(self, user_prefs: dict, duration: int) -> Tuple[str, str, str]:
        """Generate segment based on user's 5 interactive answers"""
        try:
            topic = user_prefs.get('topic', '')
            content_type = user_prefs.get('content_type', '')
            info_source = user_prefs.get('info_source', '')
            
            # Determine if web search is needed
            web_results = ""
            should_search = (
                "‡≤á‡≤§‡≥ç‡≤§‡≥Ä‡≤ö‡≤ø‡≤® ‡≤∏‡≥Å‡≤¶‡≥ç‡≤¶‡≤ø" in content_type or
                "‡≤µ‡≥Ü‡≤¨‡≥ç ‡≤∏‡≤∞‡≥ç‡≤ö‡≥ç" in info_source
            )
            
            if should_search:
                self.logger.info(f"Performing web search for user-requested topic: {topic}")
                web_results = self.search_duckduckgo(topic)
            
            # Create custom prompt based on user preferences
            custom_prompt = self.create_interactive_prompt(user_prefs, duration, web_results)
            
            # Generate content
            segment_text = self.ai_service.generate_content(custom_prompt)
            
            # Determine category and sources
            category = self.category_detector.detect_category("", topic)
            
            if web_results:
                sources = "‡≤µ‡≥Ü‡≤¨‡≥ç ‡≤∏‡≤∞‡≥ç‡≤ö‡≥ç + AI ‡≤ï‡≤∏‡≥ç‡≤ü‡≤Æ‡≥à‡≤ú‡≥á‡≤∂‡≤®‡≥ç"
            else:
                sources = "AI ‡≤ú‡≥ç‡≤û‡≤æ‡≤® + ‡≤Ø‡≥Ç‡≤∏‡≤∞‡≥ç ‡≤™‡≥ç‡≤∞‡≤ø‡≤´‡≤∞‡≥Ü‡≤®‡≥ç‡≤∏‡≥ç"
            
            return segment_text, category, sources
            
        except Exception as e:
            self.logger.error(f"Error in custom segment generation: {e}")
            return f"‡≤ï‡≥ç‡≤∑‡≤Æ‡≤ø‡≤∏‡≤ø, ‡≤ï‡≤∏‡≥ç‡≤ü‡≤Æ‡≥ç ‡≤∏‡≥Ü‡≤ó‡≥ç‡≤Æ‡≥Ü‡≤Ç‡≤ü‡≥ç ‡≤∞‡≤ö‡≤®‡≥Ü‡≤Ø‡≤≤‡≥ç‡≤≤‡≤ø ‡≤¶‡≥ã‡≤∑: {str(e)}", "error", "N/A"

    def create_interactive_prompt(self, user_prefs: dict, duration: int, web_results: str = "") -> str:
        """Create a highly customized prompt based on user's interactive choices"""
        topic = user_prefs.get('topic', '')
        content_type = user_prefs.get('content_type', '')
        info_source = user_prefs.get('info_source', '')
        detail_level = user_prefs.get('detail_level', '')
        presentation_style = user_prefs.get('presentation_style', '')
        content_richness = user_prefs.get('content_richness', '')
        
        # Calculate words needed
        total_words = duration * 150
        
        # Build content strategy based on user choices
        content_strategy = f"""
üéØ ‡≤ï‡≤∏‡≥ç‡≤ü‡≤Æ‡≥à‡≤ú‡≥ç‡≤°‡≥ç ‡≤∏‡≥Ü‡≤ó‡≥ç‡≤Æ‡≥Ü‡≤Ç‡≤ü‡≥ç ‡≤∏‡≥É‡≤∑‡≥ç‡≤ü‡≤ø
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üë§ ‡≤Ø‡≥Ç‡≤∏‡≤∞‡≥ç ‡≤Ü‡≤Ø‡≥ç‡≤ï‡≥Ü‡≤ó‡≤≥‡≥Å:
‚Ä¢ ‡≤µ‡≤ø‡≤∑‡≤Ø ‡≤™‡≥ç‡≤∞‡≤ï‡≤æ‡≤∞: {content_type}
‚Ä¢ ‡≤Æ‡≤æ‡≤π‡≤ø‡≤§‡≤ø ‡≤Æ‡≥Ç‡≤≤: {info_source}
‚Ä¢ ‡≤µ‡≤ø‡≤µ‡≤∞ ‡≤Æ‡≤ü‡≥ç‡≤ü: {detail_level}
‚Ä¢ ‡≤™‡≥ç‡≤∞‡≤∏‡≥ç‡≤§‡≥Å‡≤§‡≤ø ‡≤∂‡≥à‡≤≤‡≤ø: {presentation_style}
‚Ä¢ ‡≤µ‡≤ø‡≤∑‡≤Ø ‡≤∏‡≤Æ‡≥É‡≤¶‡≥ç‡≤ß‡≤ø: {content_richness}
"""

        # Add web search info if available
        if web_results and "‡≤µ‡≥Ü‡≤¨‡≥ç ‡≤∏‡≤∞‡≥ç‡≤ö‡≥ç" in info_source:
            content_strategy += f"""
üîç ‡≤µ‡≥Ü‡≤¨‡≥ç ‡≤∏‡≤∞‡≥ç‡≤ö‡≥ç ‡≤´‡≤≤‡≤ø‡≤§‡≤æ‡≤Ç‡≤∂‡≤ó‡≤≥‡≥Å:
{web_results}

‚ö†Ô∏è ‡≤Æ‡≥á‡≤≤‡≤ø‡≤® ‡≤µ‡≥Ü‡≤¨‡≥ç ‡≤Æ‡≤æ‡≤π‡≤ø‡≤§‡≤ø‡≤Ø‡≤®‡≥ç‡≤®‡≥Å ‡≤¨‡≤≥‡≤∏‡≤ø ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤Ø‡≥Ç‡≤∏‡≤∞‡≥ç ‡≤Ü‡≤Ø‡≥ç‡≤ï‡≥Ü‡≤ó‡≤≥‡≤ø‡≤ó‡≥Ü ‡≤Ö‡≤®‡≥Å‡≤ó‡≥Å‡≤£‡≤µ‡≤æ‡≤ó‡≤ø ‡≤¨‡≤∞‡≥Ü‡≤Ø‡≤ø‡≤∞‡≤ø.
"""
        
        # Content depth instructions based on detail level
        depth_instructions = ""
        if "‡≤∏‡≤Ç‡≤ï‡≥ç‡≤∑‡≤ø‡≤™‡≥ç‡≤§" in detail_level:
            depth_instructions = "‚Ä¢ ‡≤Æ‡≥Å‡≤ñ‡≥ç‡≤Ø ‡≤Ö‡≤Ç‡≤∂‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤Æ‡≤æ‡≤§‡≥ç‡≤∞ ‡≤í‡≤≥‡≤ó‡≥ä‡≤≥‡≥ç‡≤≥‡≤ø, ‡≤∏‡≤Ç‡≤ï‡≥ç‡≤∑‡≤ø‡≤™‡≥ç‡≤§‡≤µ‡≤æ‡≤ó‡≤ø ‡≤¨‡≤∞‡≥Ü‡≤Ø‡≤ø‡≤∞‡≤ø"
        elif "‡≤Æ‡≤ß‡≥ç‡≤Ø‡≤Æ" in detail_level:
            depth_instructions = "‚Ä¢ ‡≤Æ‡≥Å‡≤ñ‡≥ç‡≤Ø ‡≤Ö‡≤Ç‡≤∂‡≤ó‡≤≥‡≥Å + ‡≤ï‡≥Ü‡≤≤‡≤µ‡≥Å ‡≤â‡≤¶‡≤æ‡≤π‡≤∞‡≤£‡≥Ü‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤∏‡≥á‡≤∞‡≤ø‡≤∏‡≤ø"
        elif "‡≤µ‡≤ø‡≤∏‡≥ç‡≤§‡≥É‡≤§" in detail_level:
            depth_instructions = "‚Ä¢ ‡≤µ‡≤ø‡≤µ‡≤∞‡≤µ‡≤æ‡≤¶ ‡≤µ‡≤ø‡≤µ‡≤∞‡≤£‡≥Ü, ‡≤¨‡≤π‡≥Å ‡≤â‡≤¶‡≤æ‡≤π‡≤∞‡≤£‡≥Ü‡≤ó‡≤≥‡≥Å, ‡≤∏‡≤Ç‡≤¶‡≤∞‡≥ç‡≤≠ ‡≤Æ‡≤æ‡≤π‡≤ø‡≤§‡≤ø ‡≤∏‡≥á‡≤∞‡≤ø‡≤∏‡≤ø"
        else:  # ‡≤∏‡≤Æ‡≤ó‡≥ç‡≤∞
            depth_instructions = "‚Ä¢ ‡≤∏‡≤Ç‡≤™‡≥Ç‡≤∞‡≥ç‡≤£ ‡≤µ‡≤ø‡≤µ‡≤∞‡≤£‡≥Ü, ‡≤á‡≤§‡≤ø‡≤π‡≤æ‡≤∏, ‡≤â‡≤¶‡≤æ‡≤π‡≤∞‡≤£‡≥Ü‡≤ó‡≤≥‡≥Å, ‡≤ï‡≤•‡≥Ü‡≤ó‡≤≥‡≥Å, ‡≤∏‡≤Ç‡≤¨‡≤Ç‡≤ß‡≤ø‡≤§ ‡≤µ‡≤ø‡≤∑‡≤Ø‡≤ó‡≤≥‡≥Å"
        
        # Style instructions based on presentation choice
        style_instructions = ""
        if "‡≤ü‡≤ø‡≤µ‡≤ø ‡≤®‡≥ç‡≤Ø‡≥Ç‡≤∏‡≥ç" in presentation_style:
            style_instructions = "‚Ä¢ ‡≤ü‡≤ø‡≤µ‡≤ø ‡≤Ü‡≤Ç‡≤ï‡≤∞‡≥ç ‡≤∂‡≥à‡≤≤‡≤ø, ‡≤î‡≤™‡≤ö‡≤æ‡≤∞‡≤ø‡≤ï ‡≤ü‡≥ã‡≤®‡≥ç, ‡≤∏‡≥Å‡≤¶‡≥ç‡≤¶‡≤ø ‡≤´‡≤æ‡≤∞‡≥ç‡≤Æ‡≥ç‡≤Ø‡≤æ‡≤ü‡≥ç"
        elif "‡≤∞‡≥á‡≤°‡≤ø‡≤Ø‡≥ã" in presentation_style:
            style_instructions = "‚Ä¢ ‡≤∞‡≥á‡≤°‡≤ø‡≤Ø‡≥ã ‡≤∂‡≥à‡≤≤‡≤ø, ‡≤µ‡≤∞‡≥ç‡≤£‡≤®‡≤æ‡≤§‡≥ç‡≤Æ‡≤ï ‡≤≠‡≤æ‡≤∑‡≥Ü, ‡≤Ü‡≤°‡≤ø‡≤Ø‡≥ã-‡≤´‡≥ç‡≤∞‡≥Ü‡≤Ç‡≤°‡≥ç‡≤≤‡≤ø"
        elif "‡≤∂‡≥à‡≤ï‡≥ç‡≤∑‡≤£‡≤ø‡≤ï" in presentation_style:
            style_instructions = "‚Ä¢ ‡≤∂‡≤ø‡≤ï‡≥ç‡≤∑‡≤ï‡≤∞ ‡≤∂‡≥à‡≤≤‡≤ø, ‡≤µ‡≤ø‡≤µ‡≤∞‡≤£‡≤æ‡≤§‡≥ç‡≤Æ‡≤ï, ‡≤∏‡≤∞‡≤≥ ‡≤≠‡≤æ‡≤∑‡≥Ü"
        else:  # ‡≤∏‡≤Ç‡≤≠‡≤æ‡≤∑‡≤£‡≤æ
            style_instructions = "‚Ä¢ ‡≤∏‡≥ç‡≤®‡≥á‡≤π‡≤™‡≤∞ ‡≤ü‡≥ã‡≤®‡≥ç, ‡≤∏‡≤Ç‡≤µ‡≤æ‡≤¶‡≤æ‡≤§‡≥ç‡≤Æ‡≤ï, ‡≤™‡≥ç‡≤∞‡≤∂‡≥ç‡≤®‡≥Ü‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤∏‡≥á‡≤∞‡≤ø‡≤∏‡≤ø"
        
        # Richness instructions
        richness_instructions = ""
        if "‡≤Æ‡≥Å‡≤ñ‡≥ç‡≤Ø ‡≤µ‡≤ø‡≤∑‡≤Ø ‡≤Æ‡≤æ‡≤§‡≥ç‡≤∞" in content_richness:
            richness_instructions = "‚Ä¢ ‡≤Æ‡≥Ç‡≤≤ ‡≤µ‡≤ø‡≤∑‡≤Ø‡≤ï‡≥ç‡≤ï‡≥Ü ‡≤∏‡≥Ä‡≤Æ‡≤ø‡≤§‡≤µ‡≤æ‡≤ó‡≤ø‡≤∞‡≤ø"
        elif "‡≤â‡≤¶‡≤æ‡≤π‡≤∞‡≤£‡≥Ü‡≤ó‡≤≥‡≥ä‡≤Ç‡≤¶‡≤ø‡≤ó‡≥Ü" in content_richness:
            richness_instructions = "‚Ä¢ ‡≤™‡≥ç‡≤∞‡≤§‡≤ø ‡≤™‡≤æ‡≤Ø‡≤ø‡≤Ç‡≤ü‡≥ç‚Äå‡≤ó‡≥Ü ‡≤â‡≤¶‡≤æ‡≤π‡≤∞‡≤£‡≥Ü‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤∏‡≥á‡≤∞‡≤ø‡≤∏‡≤ø"
        elif "‡≤ï‡≤•‡≥Ü‡≤ó‡≤≥‡≥Å" in content_richness:
            richness_instructions = "‚Ä¢ ‡≤Ü‡≤∏‡≤ï‡≥ç‡≤§‡≤ø‡≤¶‡≤æ‡≤Ø‡≤ï ‡≤ï‡≤•‡≥Ü‡≤ó‡≤≥‡≥Å, ‡≤â‡≤¶‡≤æ‡≤π‡≤∞‡≤£‡≥Ü‡≤ó‡≤≥‡≥Å, ‡≤µ‡≥à‡≤Ø‡≤ï‡≥ç‡≤§‡≤ø‡≤ï ‡≤Ö‡≤®‡≥Å‡≤≠‡≤µ‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤∏‡≥á‡≤∞‡≤ø‡≤∏‡≤ø"
        else:  # ‡≤∏‡≤Ç‡≤µ‡≤æ‡≤¶‡≤æ‡≤§‡≥ç‡≤Æ‡≤ï
            richness_instructions = "‚Ä¢ ‡≤™‡≥ç‡≤∞‡≥á‡≤ï‡≥ç‡≤∑‡≤ï‡≤∞‡≥ä‡≤Ç‡≤¶‡≤ø‡≤ó‡≥Ü ‡≤∏‡≤Ç‡≤µ‡≤æ‡≤¶, ‡≤™‡≥ç‡≤∞‡≤∂‡≥ç‡≤®‡≥Ü‡≤ó‡≤≥‡≥Å, ‡≤ï‡≥ç‡≤∞‡≤ø‡≤Ø‡≤æ‡≤∂‡≥Ä‡≤≤ ‡≤≠‡≤æ‡≤ó‡≤µ‡≤π‡≤ø‡≤∏‡≥Å‡≤µ‡≤ø‡≤ï‡≥Ü"

        return f"""
‡≤®‡≥Ä‡≤µ‡≥Å ‡≤Ö‡≤®‡≥Å‡≤≠‡≤µ‡≤ø ‡≤ï‡≤®‡≥ç‡≤®‡≤° ‡≤Æ‡≤æ‡≤ß‡≥ç‡≤Ø‡≤Æ ‡≤µ‡≥ç‡≤Ø‡≤ï‡≥ç‡≤§‡≤ø‡≤§‡≥ç‡≤µ. "{topic}" ‡≤µ‡≤ø‡≤∑‡≤Ø‡≤¶ ‡≤¨‡≤ó‡≥ç‡≤ó‡≥Ü ‡≤®‡≤ø‡≤ñ‡≤∞‡≤µ‡≤æ‡≤ó‡≤ø {duration} ‡≤®‡≤ø‡≤Æ‡≤ø‡≤∑‡≤ó‡≤≥ ‡≤∏‡≥Ü‡≤ó‡≥ç‡≤Æ‡≥Ü‡≤Ç‡≤ü‡≥ç ‡≤∞‡≤ö‡≤ø‡≤∏‡≤ø.

{content_strategy}

üìã ‡≤µ‡≤ø‡≤∑‡≤Ø ‡≤®‡≤ø‡≤∞‡≥ç‡≤¶‡≥á‡≤∂‡≤®‡≤ó‡≤≥‡≥Å:
{depth_instructions}
{style_instructions}
{richness_instructions}

üìè ‡≤®‡≤ø‡≤ñ‡≤∞ ‡≤Ö‡≤µ‡≤∂‡≥ç‡≤Ø‡≤ï‡≤§‡≥Ü‡≤ó‡≤≥‡≥Å:
‚Ä¢ ‡≤Ö‡≤µ‡≤ß‡≤ø: ‡≤®‡≤ø‡≤ñ‡≤∞‡≤µ‡≤æ‡≤ó‡≤ø {duration} ‡≤®‡≤ø‡≤Æ‡≤ø‡≤∑‡≤ó‡≤≥‡≥Å (‡≤∏‡≥Å‡≤Æ‡≤æ‡≤∞‡≥Å {total_words} ‡≤™‡≤¶‡≤ó‡≤≥‡≥Å)
‚Ä¢ ‡≤≠‡≤æ‡≤∑‡≥Ü: ‡≤∂‡≥Å‡≤¶‡≥ç‡≤ß ‡≤ï‡≤®‡≥ç‡≤®‡≤°, ‡≤∏‡≤∞‡≤≥ ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤∏‡≥ç‡≤™‡≤∑‡≥ç‡≤ü
‚Ä¢ ‡≤∞‡≤ö‡≤®‡≥Ü: ‡≤Ü‡≤ï‡≤∞‡≥ç‡≤∑‡≤ï ‡≤™‡≤∞‡≤ø‡≤ö‡≤Ø ‚Üí ‡≤Æ‡≥Å‡≤ñ‡≥ç‡≤Ø ‡≤µ‡≤ø‡≤∑‡≤Ø ‚Üí ‡≤™‡≥ç‡≤∞‡≤≠‡≤æ‡≤µ‡≤∂‡≤æ‡≤≤‡≤ø ‡≤Æ‡≥Å‡≤ï‡≥ç‡≤§‡≤æ‡≤Ø

‚ö†Ô∏è ‡≤Æ‡≥Å‡≤ñ‡≥ç‡≤Ø: ‡≤ü‡≥Ü‡≤Ç‡≤™‡≥ç‡≤≤‡≥á‡≤ü‡≥ç ‡≤Ö‡≤•‡≤µ‡≤æ ‡≤∏‡≥Ç‡≤ö‡≤®‡≥Ü‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤¨‡≤∞‡≥Ü‡≤Ø‡≤¨‡≥á‡≤°‡≤ø. ‡≤™‡≥Ç‡≤∞‡≥ç‡≤£ ‡≤∏‡≥ç‡≤ï‡≥ç‡≤∞‡≤ø‡≤™‡≥ç‡≤ü‡≥ç ‡≤Æ‡≤æ‡≤§‡≥ç‡≤∞ ‡≤¨‡≤∞‡≥Ü‡≤Ø‡≤ø‡≤∞‡≤ø.

‡≤à‡≤ó ‡≤Ø‡≥Ç‡≤∏‡≤∞‡≥ç ‡≤Ü‡≤Ø‡≥ç‡≤ï‡≥Ü‡≤ó‡≤≥ ‡≤™‡≥ç‡≤∞‡≤ï‡≤æ‡≤∞ ‡≤∏‡≤Ç‡≤™‡≥Ç‡≤∞‡≥ç‡≤£ {duration}-‡≤®‡≤ø‡≤Æ‡≤ø‡≤∑‡≤¶ ‡≤∏‡≥Ü‡≤ó‡≥ç‡≤Æ‡≥Ü‡≤Ç‡≤ü‡≥ç ‡≤¨‡≤∞‡≥Ü‡≤Ø‡≤ø‡≤∞‡≤ø:
"""
"""
Custom Segment Creation Handler
"""
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ContextTypes

from src.services.ai_service import AIService
from src.utils.file_manager import FileManager
from src.config.constants import *
from src.utils.logger import get_logger

logger = get_logger(__name__)

class SegmentHandler:
    def __init__(self):
        self.ai_service = AIService()
        self.file_manager = FileManager()
        self.logger = logger
    
    async def handle_segment_topic(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Handle segment topic input"""
        topic = update.message.text.strip()
        
        if topic.lower() in ["‚ùå stop", "stop", "cancel"]:
            await update.message.reply_text("‡≤∏‡≥Ü‡≤ó‡≥ç‡≤Æ‡≥Ü‡≤Ç‡≤ü‡≥ç ‡≤∞‡≤ö‡≤®‡≥Ü ‡≤∞‡≤¶‡≥ç‡≤¶‡≥Å‡≤™‡≤°‡≤ø‡≤∏‡≤≤‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü.")
            from src.handlers.start_handler import StartHandler
            start_handler = StartHandler()
            return await start_handler.show_main_menu(update)
        
        if not topic:
            await update.message.reply_text("‡≤¶‡≤Ø‡≤µ‡≤ø‡≤ü‡≥ç‡≤ü‡≥Å ‡≤Æ‡≤æ‡≤®‡≥ç‡≤Ø ‡≤µ‡≤ø‡≤∑‡≤Ø‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤®‡≤Æ‡≥Ç‡≤¶‡≤ø‡≤∏‡≤ø.")
            return SEGMENT_TOPIC
        
        # Store topic
        context.user_data["segment_topic"] = topic
        
        # Start interactive questions
        q1_keyboard = [
            ["üì∞ ‡≤á‡≤§‡≥ç‡≤§‡≥Ä‡≤ö‡≤ø‡≤® ‡≤∏‡≥Å‡≤¶‡≥ç‡≤¶‡≤ø/‡≤ò‡≤ü‡≤®‡≥Ü‡≤ó‡≤≥‡≥Å"],
            ["üìö ‡≤∏‡≤æ‡≤Æ‡≤æ‡≤®‡≥ç‡≤Ø ‡≤ú‡≥ç‡≤û‡≤æ‡≤®/‡≤∂‡≤ø‡≤ï‡≥ç‡≤∑‡≤£"],
            ["üé≠ ‡≤Æ‡≤®‡≤∞‡≤Ç‡≤ú‡≤®‡≥Ü/‡≤∏‡≤Ç‡≤∏‡≥ç‡≤ï‡≥É‡≤§‡≤ø"],
            ["‚ùå ‡≤∞‡≤¶‡≥ç‡≤¶‡≥Å‡≤Æ‡≤æ‡≤°‡≤ø"]
        ]
        reply_markup = ReplyKeyboardMarkup(q1_keyboard, one_time_keyboard=True, resize_keyboard=True)
        
        await update.message.reply_text(
            f"‚úÖ ‡≤µ‡≤ø‡≤∑‡≤Ø: '{topic}'\n\n"
            "‚ùì ‡≤™‡≥ç‡≤∞‡≤∂‡≥ç‡≤®‡≥Ü 1/5: ‡≤à ‡≤µ‡≤ø‡≤∑‡≤Ø‡≤µ‡≥Å ‡≤Ø‡≤æ‡≤µ ‡≤™‡≥ç‡≤∞‡≤ï‡≤æ‡≤∞‡≤¶‡≥ç‡≤¶‡≥Å?",
            reply_markup=reply_markup
        )
        return SEGMENT_Q1

        async def handle_segment_q1(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Handle Question 1: Content Type"""
        choice = update.message.text.strip()
        
        if choice == "‚ùå ‡≤∞‡≤¶‡≥ç‡≤¶‡≥Å‡≤Æ‡≤æ‡≤°‡≤ø":
            await update.message.reply_text("‡≤∏‡≥Ü‡≤ó‡≥ç‡≤Æ‡≥Ü‡≤Ç‡≤ü‡≥ç ‡≤∞‡≤ö‡≤®‡≥Ü ‡≤∞‡≤¶‡≥ç‡≤¶‡≥Å‡≤™‡≤°‡≤ø‡≤∏‡≤≤‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü.")
            from src.handlers.start_handler import StartHandler
            start_handler = StartHandler()
            return await start_handler.show_main_menu(update)
        
        context.user_data["segment_content_type"] = choice
        
        q2_keyboard = [
            ["üîç ‡≤µ‡≥Ü‡≤¨‡≥ç ‡≤∏‡≤∞‡≥ç‡≤ö‡≥ç + AI ‡≤ú‡≥ç‡≤û‡≤æ‡≤®"],
            ["üß† ‡≤ï‡≥á‡≤µ‡≤≤ AI ‡≤ú‡≥ç‡≤û‡≤æ‡≤®"],
            ["üéØ ‡≤®‡≥Ä‡≤µ‡≥á ‡≤®‡≤ø‡≤∞‡≥ç‡≤ß‡≤∞‡≤ø‡≤∏‡≤ø"],
            ["‚ùå ‡≤∞‡≤¶‡≥ç‡≤¶‡≥Å‡≤Æ‡≤æ‡≤°‡≤ø"]
        ]
        reply_markup = ReplyKeyboardMarkup(q2_keyboard, one_time_keyboard=True, resize_keyboard=True)
        
        await update.message.reply_text(
            "‚ùì ‡≤™‡≥ç‡≤∞‡≤∂‡≥ç‡≤®‡≥Ü 2/5: ‡≤Æ‡≤æ‡≤π‡≤ø‡≤§‡≤ø ‡≤Æ‡≥Ç‡≤≤ ‡≤Ü‡≤Ø‡≥ç‡≤ï‡≥Ü‡≤Æ‡≤æ‡≤°‡≤ø:",
            reply_markup=reply_markup
        )
        return SEGMENT_Q2

    async def handle_segment_q2(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Handle Question 2: Information Source"""
        choice = update.message.text.strip()
        
        if choice == "‚ùå ‡≤∞‡≤¶‡≥ç‡≤¶‡≥Å‡≤Æ‡≤æ‡≤°‡≤ø":
            await update.message.reply_text("‡≤∏‡≥Ü‡≤ó‡≥ç‡≤Æ‡≥Ü‡≤Ç‡≤ü‡≥ç ‡≤∞‡≤ö‡≤®‡≥Ü ‡≤∞‡≤¶‡≥ç‡≤¶‡≥Å‡≤™‡≤°‡≤ø‡≤∏‡≤≤‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü.")
            from src.handlers.start_handler import StartHandler
            start_handler = StartHandler()
            return await start_handler.show_main_menu(update)
        
        context.user_data["segment_info_source"] = choice
        
        q3_keyboard = [
            ["üìä ‡≤∏‡≤Ç‡≤ï‡≥ç‡≤∑‡≤ø‡≤™‡≥ç‡≤§ ‡≤Æ‡≤æ‡≤π‡≤ø‡≤§‡≤ø"],
            ["üìã ‡≤Æ‡≤ß‡≥ç‡≤Ø‡≤Æ ‡≤µ‡≤ø‡≤µ‡≤∞‡≤£‡≥Ü"],
            ["üìñ ‡≤µ‡≤ø‡≤∏‡≥ç‡≤§‡≥É‡≤§ ‡≤µ‡≤ø‡≤µ‡≤∞‡≤£‡≥Ü"],
            ["üéì ‡≤∏‡≤Æ‡≤ó‡≥ç‡≤∞ ‡≤∏‡≥ç‡≤ï‡≥ç‡≤∞‡≤ø‡≤™‡≥ç‡≤ü‡≥ç"],
            ["‚ùå ‡≤∞‡≤¶‡≥ç‡≤¶‡≥Å‡≤Æ‡≤æ‡≤°‡≤ø"]
        ]
        reply_markup = ReplyKeyboardMarkup(q3_keyboard, one_time_keyboard=True, resize_keyboard=True)
        
        await update.message.reply_text(
            "‚ùì ‡≤™‡≥ç‡≤∞‡≤∂‡≥ç‡≤®‡≥Ü 3/5: ‡≤µ‡≤ø‡≤∑‡≤Ø‡≤¶ ‡≤µ‡≤ø‡≤µ‡≤∞ ‡≤Æ‡≤ü‡≥ç‡≤ü ‡≤Ü‡≤Ø‡≥ç‡≤ï‡≥Ü‡≤Æ‡≤æ‡≤°‡≤ø:",
            reply_markup=reply_markup
        )
        return SEGMENT_Q3

    async def handle_segment_q3(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Handle Question 3: Detail Level"""
        choice = update.message.text.strip()
        
        if choice == "‚ùå ‡≤∞‡≤¶‡≥ç‡≤¶‡≥Å‡≤Æ‡≤æ‡≤°‡≤ø":
            await update.message.reply_text("‡≤∏‡≥Ü‡≤ó‡≥ç‡≤Æ‡≥Ü‡≤Ç‡≤ü‡≥ç ‡≤∞‡≤ö‡≤®‡≥Ü ‡≤∞‡≤¶‡≥ç‡≤¶‡≥Å‡≤™‡≤°‡≤ø‡≤∏‡≤≤‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü.")
            from src.handlers.start_handler import StartHandler
            start_handler = StartHandler()
            return await start_handler.show_main_menu(update)
        
        context.user_data["segment_detail_level"] = choice
        
        q4_keyboard = [
            ["üì∫ ‡≤ü‡≤ø‡≤µ‡≤ø ‡≤®‡≥ç‡≤Ø‡≥Ç‡≤∏‡≥ç ‡≤∂‡≥à‡≤≤‡≤ø"],
            ["üéôÔ∏è ‡≤∞‡≥á‡≤°‡≤ø‡≤Ø‡≥ã ‡≤∂‡≥à‡≤≤‡≤ø"],
            ["üìñ ‡≤∂‡≥à‡≤ï‡≥ç‡≤∑‡≤£‡≤ø‡≤ï ‡≤∂‡≥à‡≤≤‡≤ø"],
            ["üí¨ ‡≤∏‡≤Ç‡≤≠‡≤æ‡≤∑‡≤£‡≤æ ‡≤∂‡≥à‡≤≤‡≤ø"],
            ["‚ùå ‡≤∞‡≤¶‡≥ç‡≤¶‡≥Å‡≤Æ‡≤æ‡≤°‡≤ø"]
        ]
        reply_markup = ReplyKeyboardMarkup(q4_keyboard, one_time_keyboard=True, resize_keyboard=True)
        
        await update.message.reply_text(
            "‚ùì ‡≤™‡≥ç‡≤∞‡≤∂‡≥ç‡≤®‡≥Ü 4/5: ‡≤™‡≥ç‡≤∞‡≤∏‡≥ç‡≤§‡≥Å‡≤§‡≤ø ‡≤∂‡≥à‡≤≤‡≤ø ‡≤Ü‡≤Ø‡≥ç‡≤ï‡≥Ü‡≤Æ‡≤æ‡≤°‡≤ø:",
            reply_markup=reply_markup
        )
        return SEGMENT_Q4

    async def handle_segment_q4(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Handle Question 4: Presentation Style"""
        choice = update.message.text.strip()
        
        if choice == "‚ùå ‡≤∞‡≤¶‡≥ç‡≤¶‡≥Å‡≤Æ‡≤æ‡≤°‡≤ø":
            await update.message.reply_text("‡≤∏‡≥Ü‡≤ó‡≥ç‡≤Æ‡≥Ü‡≤Ç‡≤ü‡≥ç ‡≤∞‡≤ö‡≤®‡≥Ü ‡≤∞‡≤¶‡≥ç‡≤¶‡≥Å‡≤™‡≤°‡≤ø‡≤∏‡≤≤‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü.")
            from src.handlers.start_handler import StartHandler
            start_handler = StartHandler()
            return await start_handler.show_main_menu(update)
        
        context.user_data["segment_presentation_style"] = choice
        
        q5_keyboard = [
            ["üéØ ‡≤Æ‡≥Å‡≤ñ‡≥ç‡≤Ø ‡≤µ‡≤ø‡≤∑‡≤Ø ‡≤Æ‡≤æ‡≤§‡≥ç‡≤∞"],
            ["üìù ‡≤â‡≤¶‡≤æ‡≤π‡≤∞‡≤£‡≥Ü‡≤ó‡≤≥‡≥ä‡≤Ç‡≤¶‡≤ø‡≤ó‡≥Ü"],
            ["üåü ‡≤ï‡≤•‡≥Ü‡≤ó‡≤≥‡≥Å + ‡≤â‡≤¶‡≤æ‡≤π‡≤∞‡≤£‡≥Ü‡≤ó‡≤≥‡≥Å"],
            ["üé≠ ‡≤∏‡≤Ç‡≤µ‡≤æ‡≤¶‡≤æ‡≤§‡≥ç‡≤Æ‡≤ï ‡≤µ‡≤ø‡≤∑‡≤Ø"],
            ["‚ùå ‡≤∞‡≤¶‡≥ç‡≤¶‡≥Å‡≤Æ‡≤æ‡≤°‡≤ø"]
        ]
        reply_markup = ReplyKeyboardMarkup(q5_keyboard, one_time_keyboard=True, resize_keyboard=True)
        
        await update.message.reply_text(
            "‚ùì ‡≤™‡≥ç‡≤∞‡≤∂‡≥ç‡≤®‡≥Ü 5/5: ‡≤µ‡≤ø‡≤∑‡≤Ø ‡≤∏‡≤Æ‡≥É‡≤¶‡≥ç‡≤ß‡≤ø ‡≤Ü‡≤Ø‡≥ç‡≤ï‡≥Ü‡≤Æ‡≤æ‡≤°‡≤ø:",
            reply_markup=reply_markup
        )
        return SEGMENT_Q5

    async def handle_segment_q5(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Handle Question 5: Content Richness - Then Duration Selection"""
        choice = update.message.text.strip()
        
        if choice == "‚ùå ‡≤∞‡≤¶‡≥ç‡≤¶‡≥Å‡≤Æ‡≤æ‡≤°‡≤ø":
            await update.message.reply_text("‡≤∏‡≥Ü‡≤ó‡≥ç‡≤Æ‡≥Ü‡≤Ç‡≤ü‡≥ç ‡≤∞‡≤ö‡≤®‡≥Ü ‡≤∞‡≤¶‡≥ç‡≤¶‡≥Å‡≤™‡≤°‡≤ø‡≤∏‡≤≤‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü.")
            from src.handlers.start_handler import StartHandler
            start_handler = StartHandler()
            return await start_handler.show_main_menu(update)
        
        context.user_data["segment_content_richness"] = choice
        
        # Show user their selections
        summary = f"""
‚úÖ ‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤Ü‡≤Ø‡≥ç‡≤ï‡≥Ü‡≤ó‡≤≥‡≥Å:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üìå ‡≤µ‡≤ø‡≤∑‡≤Ø: {context.user_data.get('segment_topic', 'N/A')}
üéØ ‡≤™‡≥ç‡≤∞‡≤ï‡≤æ‡≤∞: {context.user_data.get('segment_content_type', 'N/A')}
üîç ‡≤Æ‡≥Ç‡≤≤: {context.user_data.get('segment_info_source', 'N/A')}
üìã ‡≤µ‡≤ø‡≤µ‡≤∞: {context.user_data.get('segment_detail_level', 'N/A')}
üéôÔ∏è ‡≤∂‡≥à‡≤≤‡≤ø: {context.user_data.get('segment_presentation_style', 'N/A')}
üåü ‡≤∏‡≤Æ‡≥É‡≤¶‡≥ç‡≤ß‡≤ø: {choice}
"""
        
        await update.message.reply_text(summary)
        
        # Ask for duration
        duration_keyboard = [
            ["2", "3", "5"],
            ["7", "10", "15"],
            ["‚ùå ‡≤∞‡≤¶‡≥ç‡≤¶‡≥Å‡≤Æ‡≤æ‡≤°‡≤ø"]
        ]
        reply_markup = ReplyKeyboardMarkup(duration_keyboard, one_time_keyboard=True, resize_keyboard=True)
        
        await update.message.reply_text(
            "‚è±Ô∏è ‡≤Ö‡≤Ç‡≤§‡≤ø‡≤Æ ‡≤™‡≥ç‡≤∞‡≤∂‡≥ç‡≤®‡≥Ü: ‡≤∏‡≥Ü‡≤ó‡≥ç‡≤Æ‡≥Ü‡≤Ç‡≤ü‡≥ç ‡≤Ö‡≤µ‡≤ß‡≤ø ‡≤Ü‡≤Ø‡≥ç‡≤ï‡≥Ü‡≤Æ‡≤æ‡≤°‡≤ø (‡≤®‡≤ø‡≤Æ‡≤ø‡≤∑‡≤ó‡≤≥‡≤≤‡≥ç‡≤≤‡≤ø):",
            reply_markup=reply_markup
        )
        return SEGMENT_DURATION

    async def handle_segment_duration(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Handle segment duration input"""
        duration = update.message.text.strip()
        
        if duration == "‚ùå ‡≤∞‡≤¶‡≥ç‡≤¶‡≥Å‡≤Æ‡≤æ‡≤°‡≤ø":
            await update.message.reply_text("‡≤∏‡≥Ü‡≤ó‡≥ç‡≤Æ‡≥Ü‡≤Ç‡≤ü‡≥ç ‡≤∞‡≤ö‡≤®‡≥Ü ‡≤∞‡≤¶‡≥ç‡≤¶‡≥Å‡≤™‡≤°‡≤ø‡≤∏‡≤≤‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü.")
            from src.handlers.start_handler import StartHandler
            start_handler = StartHandler()
            return await start_handler.show_main_menu(update)
        
        try:
            # Validate duration is a positive number
            duration_int = int(duration)
            if duration_int <= 0:
                raise ValueError("Duration must be positive")
        except ValueError:
            await update.message.reply_text("‚ö†Ô∏è ‡≤¶‡≤Ø‡≤µ‡≤ø‡≤ü‡≥ç‡≤ü‡≥Å ‡≤Æ‡≤æ‡≤®‡≥ç‡≤Ø ‡≤∏‡≤Ç‡≤ñ‡≥ç‡≤Ø‡≥Ü‡≤Ø‡≤®‡≥ç‡≤®‡≥Å ‡≤®‡≤Æ‡≥Ç‡≤¶‡≤ø‡≤∏‡≤ø (‡≤â‡≤¶‡≤æ‡≤π‡≤∞‡≤£‡≥Ü: 2, 5, 10)")
            return SEGMENT_DURATION
        
        context.user_data['segment_duration'] = duration_int
        await update.message.reply_text(
            f"‚úÖ ‡≤Ö‡≤µ‡≤ß‡≤ø: {duration_int} ‡≤®‡≤ø‡≤Æ‡≤ø‡≤∑‡≤ó‡≤≥‡≥Å\n\n"
            "üîÑ ‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤ï‡≤∏‡≥ç‡≤ü‡≤Æ‡≥ç ‡≤∏‡≥Ü‡≤ó‡≥ç‡≤Æ‡≥Ü‡≤Ç‡≤ü‡≥ç ‡≤Ö‡≤®‡≥ç‡≤®‡≥Å ‡≤∞‡≤ö‡≤ø‡≤∏‡≤≤‡≤æ‡≤ó‡≥Å‡≤§‡≥ç‡≤§‡≤ø‡≤¶‡≥Ü...\n"
            "‡≤¶‡≤Ø‡≤µ‡≤ø‡≤ü‡≥ç‡≤ü‡≥Å ‡≤ï‡≥Ü‡≤≤‡≤µ‡≥Å ‡≤∏‡≥Ü‡≤ï‡≥Ü‡≤Ç‡≤°‡≥Å‡≤ó‡≤≥‡≥Å ‡≤ï‡≤æ‡≤Ø‡≤ø‡≤∞‡≤ø.",
            reply_markup=ReplyKeyboardRemove()
        )
        return SEGMENT_PROCESSING

    async def process_segment(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Process segment with collected parameters and show results"""
        try:
            # Get user preferences
            user_prefs = {
                'topic': context.user_data.get('segment_topic', ''),
                'content_type': context.user_data.get('segment_content_type', ''),
                'info_source': context.user_data.get('segment_info_source', ''),
                'detail_level': context.user_data.get('segment_detail_level', ''),
                'presentation_style': context.user_data.get('segment_presentation_style', ''),
                'content_richness': context.user_data.get('segment_content_richness', ''),
            }
            duration = context.user_data.get('segment_duration', 5)
            
            # Import segment service
            from src.services.segment_service import SegmentService
            segment_service = SegmentService()
            
            # Generate segment
            segment_text, category, sources = await segment_service.generate_custom_segment(
                user_prefs, duration
            )
            
            # Generate the text file
            file_path = self.file_manager.generate_segment_txt(
                topic=user_prefs['topic'],
                content_type=user_prefs['content_type'],
                info_source=user_prefs['info_source'],
                detail_level=user_prefs['detail_level'],
                presentation_style=user_prefs['presentation_style'],
                content_richness=user_prefs['content_richness'],
                duration=duration
            )

            # Send success message
                        # Send success message
            await update.message.reply_text(
                f"‚úÖ ‡≤∏‡≥Ü‡≤ó‡≥ç‡≤Æ‡≥Ü‡≤Ç‡≤ü‡≥ç ‡≤Ø‡≤∂‡≤∏‡≥ç‡≤µ‡≤ø‡≤Ø‡≤æ‡≤ó‡≤ø ‡≤∞‡≤ö‡≤ø‡≤∏‡≤≤‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü!\n\n"
                f"üìä ‡≤µ‡≤ø‡≤µ‡≤∞‡≤ó‡≤≥‡≥Å:\n"
                f"‚Ä¢ ‡≤µ‡≤ø‡≤∑‡≤Ø: {user_prefs['topic']}\n"
                f"‚Ä¢ ‡≤Ö‡≤µ‡≤ß‡≤ø: {duration} ‡≤®‡≤ø‡≤Æ‡≤ø‡≤∑‡≤ó‡≤≥‡≥Å\n"
                f"‚Ä¢ ‡≤µ‡≤∞‡≥ç‡≤ó: {category}\n"
                f"‚Ä¢ ‡≤Æ‡≥Ç‡≤≤‡≤ó‡≤≥‡≥Å: {sources}"
            )

            # Send the file
            with open(file_path, 'rb') as file:
                await update.message.reply_document(
                    document=file, 
                    caption="üé¨ ‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤ï‡≤∏‡≥ç‡≤ü‡≤Æ‡≥ç ‡≤∏‡≥Ü‡≤ó‡≥ç‡≤Æ‡≥Ü‡≤Ç‡≤ü‡≥ç ‡≤´‡≥à‡≤≤‡≥ç ‡≤∏‡≤ø‡≤¶‡≥ç‡≤ß‡≤µ‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü!"
                )
            
            # Cleanup
            import os
            os.remove(file_path)
            
        except KeyError as e:
            self.logger.error(f"KeyError in process_segment: {e}")
            await update.message.reply_text(f"‚ö†Ô∏è ‡≤∏‡≥Ü‡≤ó‡≥ç‡≤Æ‡≥Ü‡≤Ç‡≤ü‡≥ç ‡≤™‡≥ç‡≤∞‡≤ï‡≥ç‡≤∞‡≤ø‡≤Ø‡≥Ü ‡≤µ‡≤ø‡≤´‡≤≤‡≤µ‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü: {e}")
        except Exception as e:
            self.logger.error(f"Segment processing failed: {str(e)}", exc_info=True)
            await update.message.reply_text("‚ö†Ô∏è ‡≤∏‡≥Ü‡≤ó‡≥ç‡≤Æ‡≥Ü‡≤Ç‡≤ü‡≥ç ‡≤™‡≥ç‡≤∞‡≤ï‡≥ç‡≤∞‡≤ø‡≤Ø‡≥Ü ‡≤µ‡≤ø‡≤´‡≤≤‡≤µ‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü")
        
        # Clear context and return to main menu
        context.user_data.clear()
        from src.handlers.start_handler import StartHandler
        start_handler = StartHandler()
        return await start_handler.show_main_menu(update)